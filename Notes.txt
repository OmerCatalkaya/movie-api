

// github işlemleri *******************************************************

// git üzerindeki repostory'nin "Clone with HTTPS " adresi alnır.
// Konsol yada terminal ekranı üzerinden "git clone" komutu ile repo yerel kaynağa klonlanır.
// git clone https://github.com/OmerCatalkaya/movie-api.git .

// "git status" komutu yapılan değişiklikler hakkında bilgi verir


// "git add ." komutu ile tüm dosyaları version kontrolüne eklenir.

// git config --global user.email omercatalkaya@gmail.com

// git config --global user.name "omercatalkaya"

// "git commit -m 'açıklama'  " komutu ile dosyalar işlenir.

// "git push origin master" komutu ile dosyalar github a gönderilir...


// express kurulum işlemleri *******************************************************

1. npm install express-generator -g komutu ile express-generator kurulur
2. express komutu ile express dosyaları kurulur.
2. npm install komutu ile paketler yüklenir

// ES 6.0 ayarları

1. jsconfig.json dosyası oluşturulur
2. İçine aşağıdaki ayar yapılır.
{
    "compilerOptions": {
        "target": "ES6"
    }
}
3. var değişken tanımlamaları const olarak değiştirilir
4. callback "function" lar ()=> arrow function olarak değiştirilir...

// MongoDB ayarları (mLab.com) *******************************************************

1. mLab bir mongoDB sunucusudur. Ücretsiz paket seçeneği de vardır. Üye olunması gerekiyor.
2. mLab ile veritabanı oluşturulur. Veritabanına bağlantı adresi alınır
    bağlantı adresi : mongodb://<dbuser>:<dbpassword>@ds135653.mlab.com:35653/movie-api
3. /helper/db.js dosyası oluşturulur.


const mongoose = require("mongoose");

module.exports = () => {

    mongoose.connect('mongodb://movie_user:abcd1234@ds135653.mlab.com:35653/movie-api', { useNewUrlParser: true })

    mongoose.connection.on("open", () => {
        console.log("mongoDB : Connected");
    });

    mongoose.connection.on("error", () => {
        console.log("mongoDB : error", err);
    });

};

4. app.js dosyası içinde

// mongoDB connection
const db = require("./helper/db.js")();


5. roboMongo ayarları yapılır.

bağlantı adresi : ds135653.mlab.com
bağlantı portu  : 35653
kullanıcı adı : movie_user
kullanıcı parolası : abcd1234

// Moovie Schema *******************************************************

1. models/Movie.js dosyası oluşturulur ve aşağıdaki kod yazılır.

const mongoose = require("mongoose");

const Schema = mongoose.Schema;

const MovieSchema = new Schema(
    {
        title: {
            type: string,
            required: true
        },
        category: String,
        country: String,
        year: Number,
        imdb_score: Number,
        date: {
            type: Date,
            default: Date.now
        }
    }
);

module.exports = mongoose.model("movie", MovieSchema);

3. app.js dosyasına aşağıdaki kod eklenir.

const movieRouter = require('./routes/movie');
...
...
...
...
app.use('/api/movie', movieRouter);

4. routes/movie.js dosyası oluşturulur.

const express = require('express');
const router = express.Router();

router.get('/', function(req, res, next) {
  res.json('respond with a resource');
});

module.exports = router;


http://localhost:3000/api/movie kontrol edilir.



// ************************ Moovie endpoint içindeki movie kaydetmemizi sağlayan post metodunun yazılması ****************************

1. 




// jsonwebtoken
// https://jwt.io

// npm install bcrypt --save

// npm install node-gyp --save

// npm install node-pre-gyp --save

// npm install jsonwebtoken --save




// *********************************** heroku işlemleri ***********************************

1> https://heroku.com/ üye ol.
2> windows için heroku cli inidir ve kur
3> komut satırından version kontrollerini yap
    > node --version
    > npm --version
    > git --version
4> komut satırından heroku ya mail adresi ve parola ile giriş yap
    >heroku login
5> komut satırından heroku da yeni bir uygulama oluştur
    > heroku create node-js-egitimi
6> package.json dosyasındaki start komutu değiştirilir.
    "scripts": {
        "start": "node ./bin/www",
        "start:dev": "nodemon ./bin/www",
    }
7> projenin son hali git ' e commit edilir
    > git add .
    > git commit -m "heroku için güncelleme"
    > git push origin master
8> proje heroku ya push edilir. Eğer komutu çalıştırınca kullanıcı adı şifre isterse 
   C:\Users\Tasarım\_netrc dosyasındaki kullanıcı adı ve parolası kullanılır. 
   yada > heroku auth:token komutu çalıştırılır. Çıkan token şifre olarak kullanılır.

    > git push heroku master
    
9> proje çalıştırılır.
    > heroku open
    yada
    https://node-js-egitimi.herokuapp.com/

10> proje çalışmaz hata verirse log çıktılarına bakmak için
    
    
    > heroku logs
    > heroku logs -n 200
    > heroku logs --dyno router
    > heroku logs --source app
    > heroku logs --source app --dyno worker
    > heroku logs --tail
    > heroku logs --source app --tail

11>




// *********************************** travis-ci.org işlemleri ***********************************


1> https://travis-ci.org/ adresine gidilir ve github hesabı ile giriş yapılır.

2> repository listesinden istenilen proje aktif edilir.

3> proje klasöründe ".travis.yml" dosyası oluşturulur.

    language: node_js
    node_js:
      - 8
    before_install:
      - npm install
      - export NODE_ENV=production
    script:
      - npm run test

4> son değişiklikler github'a aktarılır.
    > git add .
    > git commit -m "travis-ci için güncelleme"
    > git push origin master

5> git hesabına aktarılan proje travis-ci tarafından otomatik olarak build edilir.

6> Hata yok iste git hesabında  "commits" sekmesine bakılır. son commit yanında çek işareti var iste problem yoktur.

